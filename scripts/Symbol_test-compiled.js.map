{"version":3,"sources":["Symbol_test.js"],"names":[],"mappings":";;AAAA;;;AAGA;;;;;;;AAOA;AACA,IAAI,WAAW,OAAO,SAAP,CAAf;AACA,WAAW,OAAO,SAAP,CAAX;;AAEA;AACA,IAAI,IAAI,EAAR;AACA,OAAO,cAAP,CAAsB,CAAtB,EAAyB,QAAzB,EAAmC,EAAE,OAAO,QAAT,EAAnC;;AAEA;AACA,EAAE,QAAF,E,CAAY;AACZ;AACA,IAAM,YAAe,QAArB;AACA;AACA,IAAI,KAAK,OAAO,GAAP,CAAW,KAAX,CAAT;AACA,IAAI,KAAK,OAAO,GAAP,CAAW,KAAX,CAAT;;AAEA,OAAO,EAAP,C,CAAU;;AAEV;AACA;AACA,IAAM,UAAU,OAAO,GAAP,CAAW,KAAX,CAAhB;;AAEA,SAAS,CAAT,GAAa;AACT,SAAK,GAAL,GAAW,OAAX;AACH;AACD,IAAI,MAAJ;AACA,IAAI,CAAC,OAAO,OAAP,CAAL,EAAsB;AAClB,WAAO,OAAP,IAAkB,IAAI,CAAJ,EAAlB;AACH;AACD,OAAO,OAAP,GAAiB,OAAO,OAAP,CAAjB;;AAEA;AACA,OAAO,SAAP,CAAiB,KAAjB,CAAuB,MAAvB;AACA;AACA,OAAO,OAAO,KAAd","file":"Symbol_test-compiled.js","sourcesContent":["/**\r\n * Created by Administrator on 2016/8/26.\r\n */\r\n/*\r\n*创建一个项目中不重复的字符串,\r\n*再函数或对象内,不能被遍历的变量\r\n*定义实例内部私有变量,外部不可调用\r\n*创建一个单例\r\n*\r\n* */\r\n//======定义一个不重复的变量内容======\r\nvar mySymbol = Symbol(\"Symbol1\");\r\nmySymbol = Symbol(\"Symbol2\");\r\n\r\n// 第三种写法\r\nvar a = {};\r\nObject.defineProperty(a, mySymbol, { value: 'Hello!' });\r\n\r\n// 以上写法都得到同样结果\r\na[mySymbol] // \"Hello!\r\n//=====定义常量======\r\nconst COLOR_RED    = Symbol();\r\n//====获取存在的symbol 值======\r\nvar s1 = Symbol.for('foo');\r\nvar s2 = Symbol.for('foo');\r\n\r\ns1 === s2 // true\r\n\r\n//======创建单例======\r\n// mod.js\r\nconst FOO_KEY = Symbol.for('foo');\r\n\r\nfunction A() {\r\n    this.foo = 'hello';\r\n}\r\nvar global;\r\nif (!global[FOO_KEY]) {\r\n    global[FOO_KEY] = new A();\r\n}\r\nmodule.exports = global[FOO_KEY];\r\n\r\n//======内部函数======\r\nString.prototype.match(regexp);\r\n// 等同于\r\nregexp[Symbol.match](this);"]}